{"version":3,"file":"index.js","sources":["../opt/index.js"],"sourcesContent":["import { \n    readFile,\n    mkdir,\n    writeFile,\n    cp,\n    rm,\n    unlink\n} from 'node:fs/promises';\nimport { \n    readdirSync, \n    readFileSync, \n    existsSync, \n    lstatSync, \n    unlinkSync,\n    rmdirSync,\n    mkdirSync,\n    writeFileSync,\n    cpSync,\n    rmSync,\n    statSync\n} from 'node:fs';\nimport { watch } from 'node:fs';\n\nclass nodefs{\n   \n    static async getFile(opts = {}) {\n        const x = opts.path;\n        const y = opts.ext;\n        let z = [];\n        x.forEach( (aa) => {\n            const b = readdirSync(aa,{recursive: true});\n            let bbb = []\n            b.forEach((bb) =>{\n                const ba = `/${aa}/${bb}`;\n                bbb.push(ba);\n            })\n            z.push(bbb);\n        });\n        const c = z.flatMap(item => item);\n        let ee = [];\n        c.forEach((cc) =>{\n            const d = cc.split('/').slice(-1)[0].split('.');\n            const s = cc.split('/').slice(0,-1).join('/');\n            const p = d.join('.');\n            let e;\n            if(d.length > 1 && y.includes(d[1])){\n                e = `${s}/${p}`\n            }else{\n                e = ''\n            }\n        ee.push(e)\n        });\n        const cee = ee.filter(item => item !== '')\n        return cee;\n    }\n    /**\n     * Returns the parent directory of the given path if it's a directory, \n     * otherwise returns the file name.\n     *\n     * @param {string} path - The path to a file.\n     * @return {string} The parent directory or file name.\n     */\n    static getParent(path) {\n    const stats = lstatSync(path);\n    return stats.isDirectory() ? path : path.split('/').slice(0,-1).join('/');\n    }\n    /**\n     * Creates a new directory at the specified path.\n     *\n     * @param {string} path - The path where the directory should be created.\n     * @return {Promise<void>} A Promise that resolves when the directory is successfully created.\n     */\n    static async mkdir(path) {\n        const projectFolder = new URL(path, import.meta.url);\n        \n        try {\n            await mkdir(projectFolder, { recursive: true });\n            console.log(`created ${projectFolder}`);\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n    /**\n     * Creates a directory synchronously at the specified path.\n     *\n     * @param {string} path - The path where the directory should be created.\n     * @return {void} This function does not return anything.\n     */\n    static mkdirSync(path){\n        try {\n            const projectFolder = new URL(path, import.meta.url);\n            mkdirSync(projectFolder, { recursive: true });\n            console.log(`created ${projectFolder}`);\n        } catch (err) {\n            console.error(err.message);\n        }\n    }\n    /**\n     * Reads a file from the specified path.\n     *\n     * @param {string} path - The path of the file to read.\n     * @return {Promise<string|null>} The contents of the file as a string, or null if an error occurred.\n     */\n    static async readFile(path) {\n        try {\n            const filePath = new URL(path, import.meta.url);\n            const contents = await readFile(filePath, { encoding: 'utf8' });\n            return contents;\n        } catch (err) {\n            console.error(err.message);\n            return null;\n        }\n    }\n    /**\n     * Reads the contents of a file synchronously.\n     *\n     * @param {string} path - The path of the file to be read.\n     * @return {string} The contents of the file.\n     */\n    static readFileSync(path) {\n    const filePath = new URL(path, import.meta.url);\n    const contents = readFileSync(filePath, { encoding: 'utf8' });\n    \n    return contents;\n    }\n    /**\n     * Writes data to a file at the specified file path. If the directory does not exist, it creates the directory first.\n     *\n     * @param {string} filePath - The path to the file.\n     * @param {string} data - The data to write to the file.\n     * @return {Promise<void>} - A promise that resolves when the file has been successfully written.\n     */\n    static async writeFile(filePath, data) {\n        const a = filePath.split('/').slice(0,-1).join('/');\n        if(a){await this.mkdir(a)}\n        setTimeout(async()=>{\n            await writeFile(filePath, data);\n        },1000);\n        \n    }\n    /**\n     * Writes data to a file synchronously.\n     *\n     * @param {string} filePath - The path to the file.\n     * @param {any} data - The data to write to the file.\n     * @return {void} \n     */\n    static writeFileSync(filePath, data) {\n        const a = filePath.split('/').slice(0,-1).join('/');\n        if(a){this.mkdirSync(a)}\n        setTimeout(()=>{\n            writeFileSync(filePath, data);\n        },1000);\n    }\n    /**\n     * Recursively deletes all files and subdirectories in the specified directory.\n     *\n     * @param {string} directoryPath - The path of the directory to be cleared.\n     * @param {boolean} notFirstCall - Optional. Indicates whether this is the first call to the function. Default is false.\n     */\n    static clearDirectory(directoryPath, notFirstCall = false){\n        if (existsSync(directoryPath)) {\n        readdirSync(directoryPath).forEach((file) => {\n            const curPath = path.join(directoryPath, file);\n            if (lstatSync(curPath).isDirectory()) {\n            clearDirectory(curPath, true);\n            } else {\n            unlinkSync(curPath);\n            }\n        });\n        if (notFirstCall) {\n            try {\n            rmdirSync(directoryPath);\n            } catch (error) {\n            console.error(error);\n            }\n        }\n        }\n    }\n    /**\n     * Copies a directory from the source to the destination.\n     *\n     * @param {string} src - The path of the source directory.\n     * @param {string} dest - The path of the destination directory.\n     * @return {Promise} A Promise that resolves when the directory is successfully copied, or rejects with an error if the copy operation fails.\n     */\n    static async copy(src, dest) {\n        try {\n            await cp(src, dest, {recursive: true});\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    /**\n     * Copies a directory from source to destination synchronously.\n     *\n     * @param {string} src - The path of the source directory or file.\n     * @param {string} dest - The path of the destination directory or file.\n     * @return {undefined} - This function does not return a value.\n     */\n    static copySync(src, dest) {\n        try {\n            cpSync(src, dest, {recursive: true});\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    /**\n     * Removes a file or directory at the specified path.\n     *\n     * @param {string} path - The path to the file or directory to be removed.\n     * @return {Promise<void>} A Promise that resolves when the removal is complete.\n     */\n    static async remove(path) {\n       await rm(path, { recursive: true });\n    }\n    /**\n     * Removes a file or directory synchronously.\n     *\n     * @param {string} path - The path to the file or directory to be removed.\n     * @return {void} This function does not return a value.\n     */\n    static removeSync(path) {\n        rmSync(path, { recursive: true });\n    }\n    /**\n     * Delete a file at the given path.\n     *\n     * @param {string} path - The path to the file to be deleted.\n     * @return {Promise<void>} - A promise that resolves when the file is deleted.\n     */\n    static async unlink(path) {\n        try {\n            await unlink(path);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    /**\n     * Retrieves the last modified time of a file.\n     *\n     * @param {string} path - The path of the file.\n     * @return {string} The last modified time of the file in ISO format.\n     */\n    static lastUpdate(path){\n        const stats = statSync(path);\n        const lastModifiedTime = stats.mtime.toISOString();\n        return lastModifiedTime;\n    }\n    /**\n     * Checks if the given path is a directory.\n     *\n     * @param {string} path - The path to check.\n     * @return {boolean} Returns true if the path is a directory, false otherwise.\n     */\n    static isDir(path){\n        try {\n            return fs.statSync(path).isDirectory();\n        } catch {\n            return false;\n        }\n    }\n    /**\n     * Checks if the given path is a file.\n     *\n     * @param {string} path - The path to check.\n     * @return {boolean} Returns true if the path is a directory, false otherwise.\n     */\n    static isFile (path){\n        try {\n        const stat = fs.lstatSync(path);\n        return stat.isFile();\n        } catch {\n        return false;\n        }\n    }\n    /**\n     * Watches the specified directories for changes.\n     *\n     * @param {Array} opts.dir - An array of directories to watch.\n     */\n    static watch(opts={}) {\n        const dir = opts.dir;\n        dir.forEach((di) => {\n            const watcher = watch(di, {recursive: true});\n        \n            watcher.on('change',(event,filePath)=> {\n                console.log(`${filePath} has been changed`);\n            })\n              \n            watcher.on('error',(err)=>{\n                console.log(err);\n            })\n        });\n    }\n}\n\nexport default nodefs;"],"names":[],"mappings":"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"}